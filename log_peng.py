# -*- coding: utf-8 -*-
"""log_peng.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RSRTAevvjeQNhvCFa93A7v9jFSq6vm6w
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report,confusion_matrix

data=pd.read_csv('penguins.csv')

data.describe()

data.isnull()

data['species']=data['species'].replace('Chinstrap',2)
data['species']=data['species'].replace('Gentoo',1)
data['species']=data['species'].replace('Adelie',0)
data = data.drop('sex',axis=1)
data = data.drop('island',axis=1)

data.info()

data.isnull().sum()

data['bill_length_mm'].fillna(data['bill_length_mm'].mean(),inplace=True)
data['bill_depth_mm'].fillna(data['bill_depth_mm'].mean(),inplace=True)
data['flipper_length_mm'].fillna(data['flipper_length_mm'].mean(),inplace=True)
data['body_mass_g'].fillna(data['body_mass_g'].mean(),inplace=True)

data.isnull().sum()

from sklearn.model_selection import train_test_split
x = data.iloc[:,1:]
y = data.iloc[:,1]

y = np.array(y).reshape(-1,1)
x_train, x_test, y_train, y_test= train_test_split(x, y, test_size= 0.30, random_state=0)

from sklearn import preprocessing
x = preprocessing.scale(x)

print(x_train.shape,y_train.shape)
print(x_test.shape,y_test.shape)

model = LogisticRegression(C=0.5)
model.fit(x_train,y_train)

model.classes_

model.intercept_

model.coef_

model.predict_proba(x_train)

p=model.predict(x_train)

model.score(x_train,y_train)

m=confusion_matrix(y_train,p)
m

m = confusion_matrix(y_train, p)

fig, ax = plt.subplots(figsize=(8, 8))
ax.imshow(m)
ax.grid(False)
ax.xaxis.set(ticks=(0, 1), ticklabels=('Predicted 0s', 'Predicted 1s'))
ax.yaxis.set(ticks=(0, 1), ticklabels=('Actual 0s', 'Actual 1s'))
ax.set_ylim(1.5, -0.5)
for i in range(2):
    for j in range(2):
        ax.text(j, i, m[i, j], ha='center', va='center', color='red')
plt.show()

print(classification_report(y_train,p))

pre=model.predict(x_test)

m=confusion_matrix(y_test,pre)
m

model.score(x_test,y_test)

print(classification_report(y_test,pre))